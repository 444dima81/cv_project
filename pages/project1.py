import streamlit as st
import cv2
import numpy as np
import requests
from io import BytesIO
from PIL import Image
from ultralytics import YOLO
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = YOLO("models/best.pt")  # —Ç–≤–æ–π –≤–µ—Å –º–æ–¥–µ–ª–∏

st.set_page_config(page_title="Face Blur App", page_icon="üòé", layout="centered")

st.title("üòé Face Blur App")
st.markdown(
    """
    ### üîí –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ ‚Äî –∏ –ª–∏—Ü–∞ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—ã—Ç—ã.
    """
)

# --- –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
st.divider()
st.subheader("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", ("üìÇ –§–∞–π–ª—ã", "üåê –°—Å—ã–ª–∫–∏ (URL)"), horizontal=True)

images = []

if option == "üìÇ –§–∞–π–ª—ã":
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)", type=["jpg", "jpeg", "png"], accept_multiple_files=True
    )
    if uploaded_files:
        for f in uploaded_files:
            images.append(Image.open(f).convert("RGB"))

elif option == "üåê –°—Å—ã–ª–∫–∏ (URL)":
    urls = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ)", height=100, placeholder="https://example.com/image1.jpg")
    if urls:
        for url in urls.splitlines():
            url = url.strip()
            if url:
                try:
                    response = requests.get(url)
                    images.append(Image.open(BytesIO(response.content)).convert("RGB"))
                except:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {url}")

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
if images:
    st.divider()
    st.subheader("‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

for idx, image in enumerate(images):
    with st.container(border=True):
        st.markdown(f"### üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1}")

        col1, col2 = st.columns(2)

        with col1:
            st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è OpenCV
        img_cv = np.array(image)
        img_cv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2BGR)

        # –î–µ—Ç–µ–∫—Ü–∏—è
        results = model(img_cv)
        for r in results:
            for box in r.boxes.xyxy:  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏—Ü–∞
                x1, y1, x2, y2 = map(int, box)
                face = img_cv[y1:y2, x1:x2]
                if face.size > 0:
                    face = cv2.GaussianBlur(face, (99, 99), 30)
                    img_cv[y1:y2, x1:x2] = face

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL
        result_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
        result_pil = Image.fromarray(result_img)

        with col2:
            st.image(result_pil, caption="–° –∑–∞–±–ª—é—Ä–µ–Ω–Ω—ã–º–∏ –ª–∏—Ü–∞–º–∏", use_container_width=True)

        st.download_button(
            f"üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {idx+1}",
            data=BytesIO(cv2.imencode(".jpg", cv2.cvtColor(result_img, cv2.COLOR_RGB2BGR))[1].tobytes()),
            file_name=f"blurred_{idx+1}.jpg",
            mime="image/jpeg",
            use_container_width=True
        )

    st.divider()

# --- –°–µ–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ ---
st.subheader("üìö –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è"):
    st.markdown("""
    –ú–æ–¥–µ–ª—å –ø—Ä–æ—à–ª–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ 20 —ç–ø–æ—Ö –∏ –ø–æ–∫–∞–∑–∞–ª–∞ –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
    
    - Precision (0.893) ‚Äî –ø–æ—á—Ç–∏ –Ω–µ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
    - Recall (0.803) ‚Äî –Ω–∞—Ö–æ–¥–∏—Ç –æ–∫–æ–ª–æ 80% –≤—Å–µ—Ö –ª–∏—Ü, —á—Ç–æ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
    - mAP50 (0.871) ‚Äî –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è –ø—Ä–æ–¥–∞–∫—à–Ω-–º–æ–¥–µ–ª–µ–π
    - mAP50-95 (0.583) ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è face detection
    
    üîé –ò—Ç–æ–≥: –º–æ–¥–µ–ª—å –æ–±—É—á–∏–ª–∞—Å—å –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –∏ –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è –≥–æ—Ç–æ–≤—ã—Ö pre-trained —Ä–µ—à–µ–Ω–∏–π. –î–∞–ª—å–Ω–µ–π—à–µ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
    """)

    # –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è
    if os.path.exists("images/grap1.png"):
        st.image("images/grap1.png", caption="–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", use_container_width=True)
    else:
        st.info("–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª 'images/grap1.png' –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞.")

    # --- –ö–æ–ª–ª–∞–∂ —Å —Ç–µ—Å—Ç–∞–º–∏ ---
    if os.path.exists("images/My–°ollages.png"):
        st.image("images/My–°ollages.png", caption="–ö–æ–ª–ª–∞–∂ —Ç–µ—Å—Ç–æ–≤", use_container_width=True)
    else:
        st.info("–ö–æ–ª–ª–∞–∂ —Ç–µ—Å—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª 'images/My–°ollages.png' –≤ –ø–∞–ø–∫—É images.")