import streamlit as st
import cv2
import numpy as np
import requests
from io import BytesIO
from PIL import Image
from ultralytics import YOLO
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∫–æ—Ä–∞–±–ª–µ–π
model2 = YOLO("models/best_ship.pt")  # —Ç–≤–æ–π –≤–µ—Å –º–æ–¥–µ–ª–∏

st.set_page_config(page_title="Ship Detection App", page_icon="üö¢", layout="centered")

st.title("üö¢ Ship Detection App")
st.markdown(
    """
    ### üî¨ –ü–æ–∏—Å–∫ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∞—ç—Ä–æ—Å–Ω–∏–º–∫–∞—Ö
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏, –∏ –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∂–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
    """
)

# --- –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
st.divider()
st.subheader("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", ("üìÇ –§–∞–π–ª—ã", "üåê –°—Å—ã–ª–∫–∏ (URL)"), horizontal=True)

images = []

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ------------------
if option == "üìÇ –§–∞–π–ª—ã":
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)", type=["jpg", "jpeg", "png"], accept_multiple_files=True
    )
    if uploaded_files:
        for f in uploaded_files:
            try:
                img = Image.open(BytesIO(f.read())).convert("RGB")
                images.append(img)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {f.name}: {e}")

# ------------------ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL ------------------
elif option == "üåê –°—Å—ã–ª–∫–∏ (URL)":
    urls = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ)", height=100,
                        placeholder="https://example.com/image1.jpg")
    if urls:
        for url in urls.splitlines():
            url = url.strip()
            if url:
                try:
                    response = requests.get(url)
                    img = Image.open(BytesIO(response.content)).convert("RGB")
                    images.append(img)
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {url} ({e})")

# ------------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ------------------
if images:
    st.divider()
    st.subheader("‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

    for idx, image in enumerate(images):
        with st.container():
            st.markdown(f"### üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1}")

            col1, col2 = st.columns(2)

            with col1:
                st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", width="stretch")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è OpenCV
            img_cv = np.array(image)
            img_cv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2BGR)

            # –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π
            results = model2(img_cv)
            for r in results:
                for box in r.boxes.xyxy:
                    x1, y1, x2, y2 = map(int, box)
                    cv2.rectangle(img_cv, (x1, y1), (x2, y2), (0, 255, 0), 2)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL
            result_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
            result_pil = Image.fromarray(result_img)

            with col2:
                st.image(result_pil, caption="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏", width="stretch")

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                f"üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {idx+1}",
                data=BytesIO(cv2.imencode(".jpg", cv2.cvtColor(result_img, cv2.COLOR_RGB2BGR))[1].tobytes()),
                file_name=f"ships_{idx+1}.jpg",
                mime="image/jpeg",
                key=f"download_{idx+1}",
                help="–°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏ –≤–æ–∫—Ä—É–≥ –∫–æ—Ä–∞–±–ª–µ–π"
            )

        st.divider()

# --- –°–µ–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–∫–æ—Ä–∞–±–ª–∏) ---
st.subheader("üö¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ö–æ—Ä–∞–±–ª–∏)")
with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—É—á–µ–Ω–∏—è"):
    st.markdown("""
    –ú–æ–¥–µ–ª—å –æ–±—É—á–∞–ª–∞—Å—å —Å—É–º–º–∞—Ä–Ω–æ 50 —ç–ø–æ—Ö (—Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤).  
    –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
    
    - Precision: 0.582 ‚Äî –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –≤—Å–µ–≥–¥–∞ —Ç–æ—á–Ω—ã–µ, –Ω–æ —Å—Ç—Ä–µ–º—è—Ç—Å—è –±—ã—Ç—å —Ç–∞–∫–∏–º–∏  
    - Recall: 0.489 ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —á–∞—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤  
    - mAP50: 0.488 ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–µ–¥–Ω–∏–π  
    - mAP50-95: 0.297 ‚Äî –≤–∏–¥–Ω–æ, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–∫–∞ ¬´—Å—ã—Ä–æ–≤–∞—Ç–∞¬ª, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    üîé –ò—Ç–æ–≥: –º–æ–¥–µ–ª—å –æ–±—É—á–∏–ª–∞—Å—å –±–∞–∑–æ–≤–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π)
    """)
    
        # –ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è
    if os.path.exists("images/results.png"):
        st.image("images/results.png", caption="–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", use_container_width=True)
    else:
        st.info("–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª 'images/results.png' –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞.")

    # --- –ö–æ–ª–ª–∞–∂ —Å —Ç–µ—Å—Ç–∞–º–∏ ---
    if os.path.exists("images/collage2.png"):
        st.image("images/collage2.png", caption="–ö–æ–ª–ª–∞–∂ —Ç–µ—Å—Ç–æ–≤", use_container_width=True)
    else:
        st.info("–ö–æ–ª–ª–∞–∂ —Ç–µ—Å—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª 'images/collage2.png' –≤ –ø–∞–ø–∫—É images.")