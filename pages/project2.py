import streamlit as st
import cv2
import numpy as np
import requests
from io import BytesIO
from PIL import Image
from ultralytics import YOLO

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∫–æ—Ä–∞–±–ª–µ–π
model2 = YOLO("models/best_ship.pt")  # —Ç–≤–æ–π –≤–µ—Å –º–æ–¥–µ–ª–∏

st.set_page_config(page_title="Ship Detection App", page_icon="üö¢", layout="centered")

st.title("üö¢ Ship Detection App")
st.markdown(
    """
    ### üî¨ –ü–æ–∏—Å–∫ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –∞—ç—Ä–æ—Å–Ω–∏–º–∫–∞—Ö
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏, –∏ –º–æ–¥–µ–ª—å –ø–æ–∫–∞–∂–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
    """
)

# --- –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
st.divider()
st.subheader("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

option = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:", ("üìÇ –§–∞–π–ª—ã", "üåê –°—Å—ã–ª–∫–∏ (URL)"), horizontal=True)

images = []

if option == "üìÇ –§–∞–π–ª—ã":
    uploaded_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ(—è)", type=["jpg", "jpeg", "png"], accept_multiple_files=True
    )
    if uploaded_files:
        for f in uploaded_files:
            images.append(Image.open(f).convert("RGB"))

elif option == "üåê –°—Å—ã–ª–∫–∏ (URL)":
    urls = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫–µ)", height=100, placeholder="https://example.com/image1.jpg")
    if urls:
        for url in urls.splitlines():
            url = url.strip()
            if url:
                try:
                    response = requests.get(url)
                    images.append(Image.open(BytesIO(response.content)).convert("RGB"))
                except:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {url}")

# --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
if images:
    st.divider()
    st.subheader("‚öôÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")

for idx, image in enumerate(images):
    with st.container():
        st.markdown(f"### üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx+1}")

        col1, col2 = st.columns(2)

        with col1:
            st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è OpenCV
        img_cv = np.array(image)
        img_cv = cv2.cvtColor(img_cv, cv2.COLOR_RGB2BGR)

        # –î–µ—Ç–µ–∫—Ü–∏—è –∫–æ—Ä–∞–±–ª–µ–π
        results = model2(img_cv)
        for r in results:
            for box in r.boxes.xyxy:
                x1, y1, x2, y2 = map(int, box)
                # –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–æ–∫—Ä—É–≥ –∫–æ—Ä–∞–±–ª—è
                cv2.rectangle(img_cv, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ PIL
        result_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
        result_pil = Image.fromarray(result_img)

        with col2:
            st.image(result_pil, caption="–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏", use_container_width=True)

        st.download_button(
            f"üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç {idx+1}",
            data=BytesIO(cv2.imencode(".jpg", cv2.cvtColor(result_img, cv2.COLOR_RGB2BGR))[1].tobytes()),
            file_name=f"ships_{idx+1}.jpg",
            mime="image/jpeg",
            use_container_width=True
        )

    st.divider()